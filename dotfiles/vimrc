" Set up pathogen
set nocompatible
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype on
filetype plugin on
filetype indent on

set visualbell
set textwidth=0
set showmatch
set showmode
set showcmd
set ignorecase
set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set softtabstop=4
set modeline

set smartcase
set hidden
set history=1000
set scrolloff=2
set incsearch
set hlsearch
set ttyfast

set mouse=a

" see :help smartindent for inoremap details
set smartindent
set smarttab
set expandtab

" turn off annoying X-window title renaming
" handle window crap
set notitle
set ruler
set laststatus=2
set nobackup
set writebackup

" Want the current line hilighted
set cursorline

" Better filename completion (more like the shell)
set wildmode=longest:list
set wildmenu

set directory^=~/.vimswap//

" Config for clang autocomplete
set completeopt=menu,menuone,longest,preview
set pumheight=15
inoremap <expr> <C-J> pumvisible() ? "\<C-N>" : "\<C-J>"
inoremap <expr> <C-K> pumvisible() ? "\<C-P>" : "\<C-K>"
let g:clang_auto_select = 2
let g:clang_complete_copen = 1
let g:clang_periodic_quickfix = 1
let g:clang_snippets = 1
let g:clang_snippets_engine = 'clang_complete'
let g:clang_use_library = 1
let g:clang_complete_macros = 1
let g:clang_complete_patterns = 1
let g:clang_close_preview = 1

" xml-plugin opts before ftplugins turned on
let xml_use_html = 1

au!
syntax on
au BufNewFile,BufRead **/mozilla/*.cpp,**/mozilla/*.h set ft=mozilla-c
au BufNewFile,BufRead **/mozilla/*.js,**/mozilla/*.jsm set ft=mozilla-js
au BufNewFile,BufRead *.pyx,*.pxd set ft=pyrex
au BufNewFile,BufRead *.md set ft=markdown
au FileType javascript so $HOME/.vim/js.vim
au FileType c so $HOME/.vim/c.vim
au FileType cpp so $HOME/.vim/cpp.vim
au FileType mozilla-c so $HOME/.vim/mozilla.vim
au FileType mozilla-js so $HOME/.vim/mozilla_js.vim
au FileType makefile so $HOME/.vim/Make.vim
au FileType sql so $HOME/.vim/sql.vim
au FileType python so $HOME/.vim/python.vim
au FileType pyrex so $HOME/.vim/pyrex.vim
au FileType text so $HOME/.vim/txt.vim
au FileType vim so $HOME/.vim/vim.vim

" according to smartindent help, this makes comments align as i wish
inoremap # X#

inoremap jj <Esc>
inoremap kk <Esc>
inoremap jw <Esc> :w<CR>

nmap <C-k> :bp<CR>
nmap <C-j> :bn<CR>
nnoremap <f5> :bufdo bw<CR>

let mapleader = ","
nmap <leader>e :edit <C-R>=expand('%:p:h') . "/"<CR>
nmap <leader>j :LustyJuggler<CR>
nmap <leader>m :CtrlPMixed<CR>
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>r :CtrlPMRU<CR>
nmap <leader>f :CtrlP<CR>

let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|obj-ff-.*$\|\.dropbox$\|\.fontconfig$\|\.cups$\|\.vimswap$\|\.wireshark.*$\|Library$\|\.ctrlp_cache$\|\.config$\|\.gem$\|Virtual Machines\.localized$\|Music$\|\.ccache$\|\.gem$\|\.hgext$\|\.pentadactyl$\|\.pip$\|\.clamquarantine$\|Movies$\|Pictures$\|Public$\|\.Trash$\|\.ssh$\|inbound$',
    \ 'file': '\.o$\|\.so$\|\.pyc$\|\.DS_Store$\|\.localized$\|Icon.$\|\.dmg$\|\.jpg$\|\.png$\|\.zip$\|\.tar$\|\.xpi$\|\.gif$\|\.tgz$\|\.tar\.bz2$\|\.tar\.gz$\|\.CFUserTextEncoding$\|\.Rapp\.history$\|\.X.*$\|\..*_history$\|\.lesshst$\|\.mozconfig.*$\|\.netrc$\|\.rnd$\|\.zcompdump\|\.patch$\|\.pdf$\|\.viminfo$\|\.parentlock$\|\.sqlite.*$\|\.p12$\|\.dia.*$\|\.plist$\|\.doc$\|\.rtf$\|\.odt$\|\.wav$\|\.pages$\|\.rdp$\|\.rdf$\|\.exe$\|\.tbz$\|\.docx$\|\.gdoc$\|\.diff$\|\.3gp$\|\.itermcolors$\|mseed.*$\|\.dropbox$',
    \ }
let g:ctrlp_by_filename = 1
let g:ctrlp_max_history = 0
let g:ctrlp_max_files = 0
let g:ctrlp_prompt_mappings = {
    \ 'PrtSelectMove("j")': ['<c-j>', '<down>', '<c-n>'],
    \ 'PrtSelectMove("k")': ['<c-k>', '<up>', '<c-p>'],
    \ 'PrtHistory(-1)':     [],
    \ 'PrtHistory(1)':      [],
    \ }
let g:ctrlp_command = 'CtrlPRoot'

" http://www.vim.org/tips/tip.php?tip_id=94
set tags=tags;/,~/src/**/tags

" Make terminal colors things I like
set bg=dark
let g:solarized_bold=0
let g:solarized_italic=0
let g:solarized_underline=0
if exists('$TERM_SESSION_CLASS_ID')
    let g:solarized_termcolors=256
endif
colorscheme solarized

hi LineTooLong cterm=underline term=underline
hi TrailingWhitespace ctermbg=darkred term=underline
hi link javaScriptNumber Number
let python_highlight_all = 1

" Have the status line show the filename, whether or not it's modified,
" read-only, a help buffer, and type on the left. Show line number, column
" number, and percentage through file on right
set statusline=%F%m%r%h%y%=%l,%v\ [%p%%]

" Setup hilighting for certain line conditions
au FileType javascript,c,cpp,makefile,sql,python,vim let w:m1=matchadd('LineTooLong', '\%>80v.\+', -1)
au FileType javascript,c,cpp,makefile,sql,python,vim let w:m2=matchadd('TrailingWhitespace', '\s\+\%#\@<!$', -1)

" Make editing in command-line mode simpler for me - emacs-style
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <C-D> <Del>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <C-J> <Down>
cnoremap <C-K> <Up>

" Easy way to clear hilight from search
nnoremap <leader><space> :noh<CR>

" Easy way to ack for things
nnoremap <leader><C-]> :Ack! <C-R><C-W><CR>

" Set up Powerline
set encoding=utf-8
let g:Powerline_symbols='fancy'
let g:Powerline_colorscheme='todesschaf'
let g:Powerline_theme='todesschaf'

" Connect to the system clipboard
set clipboard=unnamed

" Let vim change the cursor in iTerm
if exists('$ITERM_PROFILE')
    let &t_SI="\<Esc>]50;CursorShape=1\x7"
    let &t_EI="\<Esc>]50;CursorShape=0\x7"
endif

" Bring in machine-local customizations
if filereadable(glob("~/.vimrc.local"))
    so ~/.vimrc.local
endif
