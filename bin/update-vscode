#!/usr/bin/env python

import os
import requests
import shutil
import subprocess
import sys

def die(msg, code=1):
    sys.stderr.write('%s\n' % (msg,))
    sys.exit(code)

vscode_procs = None
try:
    print 'Checking for running VS Code...'
    vscode_procs = subprocess.check_output(['pgrep', 'code-insiders'],
                                           stderr=subprocess.PIPE)
except subprocess.CalledProcessError:
    pass

if vscode_procs:
    die('Visual Studio Code appears to still be running. Exit it and try again.')

home = os.getenv('HOME')
vscode_root = os.path.join(home, '.local', 'vscode')
if not os.path.exists(vscode_root):
    die('VS Code root missing: %s' % (vscode_root,))
print 'VS Code root: %s' % (vscode_root,)

# See if we have an update available
print 'Checking for update...'
update_url = 'https://vscode-update.azurewebsites.net/latest/linux-x64/insider'

response = requests.head(update_url, allow_redirects=True)
content_md5 = None
if response.status_code == 200:
    content_md5 = response.headers['content-md5']

if not content_md5:
    die('No update (MD5 missing)')

md5_file = os.path.join(vscode_root, 'current-md5')
current_md5 = file(md5_file).read().strip()
if current_md5 == content_md5:
    die('No update available', code=0)

# Download the new tarball
print 'Downloading new tarball...'
response = requests.get(update_url)
if response.status_code != 200:
    die('Error downloading %s' % (update_url,))

output_file = os.path.join(vscode_root, 'code.tgz')
with file(output_file, 'w') as f:
    f.write(response.content)

# Move our current installation out of the way, keeping one backup
print 'Backing up current version...'
install_dir = os.path.join(vscode_root, 'VSCode-linux-x64')
previous_install = install_dir + '-previous'
if os.path.exists(install_dir):
    if os.path.exists(previous_install):
        shutil.rmtree(previous_install)
    shutil.move(install_dir, previous_install)

print 'Unpacking new version...'
rv = subprocess.call(['tar', '-C', vscode_root, '-xzf', output_file],
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
if rv != 0:
    # Restore our current version
    if os.path.exists(previous_install):
        shutil.move(previous_install, install_dir)
    die('Error unpacking %s' % (output_file,))

print 'Updating md5...'
with file(md5_file, 'w') as f:
    f.write(content_md5)
