#!/usr/bin/env python

import subprocess
import sys

def die(msg):
    sys.stderr.write('%s\n' % (msg,))
    sys.exit(1)

def outgoing(branch):
    try:
        mergebase = subprocess.check_output(['git', 'merge-base', branch,
                                             'HEAD'])
    except subprocess.CalledProcessError:
        die('Could not find merge base for %s and HEAD' % (branch,))
    mergebase = mergebase.strip()

    try:
        subprocess.check_output(['git', 'merge-base', '--is-ancestor', branch,
                                 'HEAD'])
    except subprocess.CalledProcessError:
        die('Divergent branches: %s is not an ancestor of HEAD!' % (branch,))

    sys.stdout.write('Outgoing commits from HEAD to %s:\n' % (branch,))
    subprocess.call(['git', 'log', '--oneline', '%s...HEAD' % (mergebase,)])

def get_default_merge():
    try:
        symref = subprocess.check_output(['git', 'symbolic-ref', 'HEAD'])
    except subprocess.CalledProcessError:
        die('Could not get symbolic ref for HEAD')

    # Strip "refs/heads/" from the output above
    symref = symref[11:]

    bconfig = 'branch.%s' % (symref,)
    try:
        remote = subprocess.check_output(
            ['git', 'config', '--get', '%s.remote' % (bconfig,)]
        )
    except subprocess.CalledProcessError:
        die('Could not get %s.remote' % (bconfig,))

    try:
        merge = subprocess.check_output(
            ['git', 'config', '--get', '%s.merge' % (bconfig,)]
        )
    except subprocess.CalledProcessError:
        die('Could not get %s.merge' % (bconfig,))

    # Strip "refs/heads/" from the merge branch
    merge = merge[11:]

    return '%s/%s' % (remote, merge)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        branch = get_default_merge()
    elif len(sys.argv) == 2:
        branch = sys.argv[1]
    else:
        die('Usage: git outgoing [branch]')
    outgoing(branch)
