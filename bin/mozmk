#!/usr/bin/env python

import os
import platform
import subprocess
import sys

HAVE_GROWLNOTIFY = False

def display_status(status, stage=None):
    sys.stdout.write('!!! BUILD %s ' % (status.upper(),))
    if stage:
        sys.stdout.write('(%s) ' % (stage,))
    sys.stdout.write('!!!\n')

    if HAVE_GROWLNOTIFY:
        message = status.capitalize()
        if stage:
            message = '%s (%s)' % (message, stage)
        subprocess.call(['growlnotify', '-n', 'mozmk', '-s', '-m', message,
                         'Build Complete'],
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

def main():
    global HAVE_GROWLNOTIFY

    acts = []
    config = 'desktop'

    if platform.system() == 'Darwin':
        rval = subprocess.call(['/usr/bin/which', 'growlnotify'],
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if rval == 0:
            HAVE_GROWLNOTIFY = True

    if len(sys.argv) > 1:
        if sys.argv[1] not in ('build', 'clean', 'rebuild', 'everything'):
            config = sys.argv[1]
        else:
            act = sys.argv[1]
            if act == 'rebuild':
                acts = ['distclean', 'build']
            else:
                acts = [act]
            if len(sys.argv) > 2:
                config = sys.argv[2]

    homedir = os.getenv('HOME')
    configfile = os.path.join(homedir, '.mozconfig-%s' % (config,))
    if not os.path.exists(configfile):
        configfile = os.getenv('MOZCONFIG')
        if not configfile or not os.path.exists(configfile):
            sys.stderr.write("Can't find mozconfig\n")
            sys.exit(1)

    os.environ['MOZCONFIG'] = configfile
    sys.stdout.write('MOZCONFIG=%s\n' % (configfile,))
    for act in acts:
        sys.stdout.write('make -f client.mk %s\n' % (act,))
        rval = subprocess.call(['make', '-f', 'client.mk', act], env=os.environ)
        if rval:
            display_status('failed', stage)
            sys.exit(rval)

    display_status('succeeded')
    sys.exit(0)

if __name__ == '__main__':
    main()
