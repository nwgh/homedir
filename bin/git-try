#!/usr/bin/env python

import argparse
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile

PLATFORMS = ('linux', 'linux64', 'linux64-valgrind', 'linux64-st-an',
             'linux64-asan', 'linux64-br-haz', 'linux64-sh-haz', 'macosx64',
             'win32', 'win64', 'android', 'android-armv6', 'android-noion',
             'android-x86', 'ics_armv7a_gecko', 'emulator', 'emulator-jb',
             'emulator-kk', 'linux32_gecko', 'linux64_gecko', 'macosx64_gecko',
             'win32_gecko', 'all', 'none')
MOCHITESTS = ('mochitest-1', 'mochitest-2', 'mochitest-3', 'mochitest-4',
              'mochitest-5', 'mochitest-o', 'mochitest-bc')
UNITTESTS = ('reftest', 'reftest-ipc', 'reftest-no-accel', 'crashtest',
             'crashtest-ipc', 'xpcshell', 'jsreftest', 'jetpack', 'marionette',
             'mozmill', 'mochitests', 'plain-reftest-1', 'plain-reftest-2',
             'plain-reftest-3', 'plain-reftest-4', 'jsreftest-1', 'jsreftest-2',
             'jsreftest-3', 'mochitest-6', 'mochitest-7', 'mochitest-8',
             'mochitest-gl', 'robocop-1', 'robocop-2', 'crashtest-1',
             'crashtest-2', 'crashtest-3', 'reftest-1', 'reftest-2',
             'reftest-3', 'reftest-4', 'reftest-5', 'reftest-6', 'reftest-7',
             'reftest-8', 'reftest-9', 'reftest-10', 'marionette-webapi', 'all',
             'none') + MOCHITESTS
TALOS = ('chromez', 'dromaeojs', 'other', 'dirtypaint', 'svgr', 'tp5o', 'xperf',
         'remote-trobocheck', 'remote-trobocheck2', 'remote-trobopan',
         'remote-troboprovider', 'remote-tsvg', 'remote-tp4m_nochrome',
         'remote-ts', 'all', 'none')
RESTRICTIONS = ('Fedora', 'Ubuntu', 'x64', '10.6', '10.7', '10.8',
                'Windows XP', 'Windows 7', '6.2')

RESTRICTION_RE = re.compile('[-a-z0-9]+\\[')
BUILD_RE = re.compile('[do]+')

class GitPusherException(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg

class GitPusher(object):
    def __init__(self, args):
        self._parse_args(args)
        self.cleaned = False
        self.made_try_commit = False

    def _create_b_args(self, rawargs):
        debug = False
        opt = False

        for a in rawargs:
            if not BUILD_RE.match(a):
                raise GitPusherException('invalid build selection %s' % (a,))

            if 'd' in a:
                debug = True
            if 'o' in a:
                opt = True

        return '%s%s' % ('d' if debug else '', 'o' if opt else '')

    def _create_args(self, atype, rawargs):
        args = []
        for a in rawargs:
            args.extend(a.split(','))

        if atype == 'talos':
            choices = TALOS
        elif atype == 'platform':
            choices = PLATFORMS
        else:
            raise GitPusherException('internal error')

        for a in args:
            if a not in choices:
                raise GitPusherException('invalid %s: %s' % (atype, a))

        if 'all' in args:
            if len(args) != 1:
                raise GitPusherException(
                    'all can not be used with any other %s' % (atype,))
            return 'all'

        if 'none' in args:
            if len(args) != 1:
                raise GitPusherException(
                    'none can not be used with any other %s' % (atype,))
            return 'none'

        # Make a set here to ensure there are no duplicates
        return ','.join(set(args))

    def _create_u_args(self, args):
        unittests = set()
        restrictions = set()
        for a in args:
            if RESTRICTION_RE.match(a):
                test, rest = a.split('[', 1)
                restrs = rest[:-1].split(',')
                if test not in UNITTESTS:
                    raise GitPusherException('invalid unit test: %s' % (test,))
                unittests.add(test)
                restrictions.update(restrs)
            else:
                if a not in UNITTESTS:
                    raise GitPusherException('invalid unit test: %s' % (a,))
                unittests.add(a)

        if 'mochitests' in unittests:
            for m in MOCHITESTS:
                if m in unittests:
                    raise GitPusherException(
                        'mochitests can not be used with any other mochitest')

        for r in restrictions:
            if r.startswith('-'):
                # Handle the case when we're removing something from a set
                r = r[1:]
            if r not in RESTRICTIONS:
                raise GitPusherException('invalid restriction: %s' % (r,))

        if not restrictions:
            return ','.join(unittests)
        else:
            res = []
            restrs = ','.join(restrictions)
            for u in unittests:
                res.append('%s[%s]' % (u, restrs))
            return ','.join(res)

    def _parse_args(self, args):
        p = argparse.ArgumentParser(prog='git land')
        p.add_argument('-b', '--build', action='append')
        p.add_argument('-p', '--platform',
                help='Platforms to build', action='append')
        p.add_argument('-u', '--unittests',
                help='Unit tests to run', action='append')
        p.add_argument('-t', '--talos',
                help='Talos tests to run', action='append')
        p.add_argument('-e', '--all-emails', help='Send all email',
                action='store_true')
        p.add_argument('-n', '--no-emails', help='Send no email',
                action='store_true')
        p.add_argument('-f', '--failure-emails', help='Send email on failures',
                       action='store_true')
        p.add_argument('-m', '--mozilla-central', action='store_true',
                help='Use mozilla-central configuration')

        args = p.parse_args(args)

        self.args = {'build':None, 'platform':None, 'unittests':None,
                     'talos':None, 'email':None}

        if args.build:
            # Use a set to ensure there are no duplicates
            self.args['build'] = self._create_b_args(args.build)

        if args.platform:
            self.args['platform'] = self._create_args('platform', args.platform)

        if args.unittests:
            self.args['unittests'] = self._create_u_args(args.unittests)

        if args.talos:
            self.args['talos'] = self._create_args('talos', args.talos)

        if sum(map(int, [args.all_emails, args.no_emails, args.failure_emails])) > 1:
            raise GitPusherException('-e, -n, and -f are exclusive')

        if args.all_emails:
            self.args['email'] = '-e'

        if args.no_emails:
            self.args['email'] = '-n'

        if args.failure_emails:
            self.args['email'] = '-f'

        if args.mozilla_central:
            if args.build or args.platform or args.unittests or args.talos:
                raise GitPusherException('-m may not be used with -b, -p, -u or -t')
            self.args['build'] = 'do'
            self.args['platform'] = 'all'
            self.args['unittests'] = 'all'
            self.args['talos'] = 'all'

        if not self.args['build'] or not self.args['platform']:
            raise GitPusherException('missing -b and -p')

    def _build_try_args(self):
        args = ['-b', self.args['build'], '-p', self.args['platform']]

        if self.args['unittests']:
            args.extend(['-u', self.args['unittests']])

        if self.args['talos']:
            args.extend(['-t', self.args['talos']])

        if self.args['email']:
            args.append(self.args['email'])

        return ' '.join(args)

    def cleanup(self):
        if self.cleaned:
            return

        self.cleaned = True
        if self.made_try_commit:
            p = subprocess.Popen(['git', 'reset', '--hard', 'HEAD~1'])
            if p.wait():
                raise GitPusherException('failed to reset to reasonable HEAD')

    def _push_to_try(self):
        args = self._build_try_args()
        p = subprocess.Popen(['git', 'commit', '--allow-empty', '-m',
                              'try: %s' % (args,),],
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if p.wait():
            raise GitPusherException('failed setting try selections')
        self.made_try_commit = True

        p = subprocess.Popen(['git', 'push', 'try'])
        if p.wait():
            raise GitPusherException('failed to push to try')

    def run(self):
        # Ensure there aren't any outstanding changes
        p = subprocess.Popen(['git', 'status', '--porcelain', '-z'],
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        p.wait()
        if p.stdout.read():
            raise GitPusherException('You have uncommitted changes')

        try:
            self._push_to_try()
        finally:
            self.cleanup()

if __name__ == '__main__':
    try:
        t = GitPusher(sys.argv[1:])
        t.run()
    except GitPusherException as e:
        sys.stderr.write('%s\n' % (e,))
        sys.exit(1)
