#!/usr/bin/env python

import argparse
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile

PLATFORMS = ('linux', 'linux64', 'linux64-asan', 'linux64-st-an',
             'linux64-valgrind', 'linux64-br-haz', 'linux64-b2g-haz',
             'linux64-mulet', 'macosx64', 'macosx64-mulet', 'win32',
             'win32-mulet', 'win64', 'android-api-9', 'android-api-11',
             'android-x86', 'emulator', 'emulator-jb', 'emulator-kk',
             'emulator-l', 'linux32_gecko', 'linux64_gecko', 'macosx64_gecko',
             'win32_gecko', 'linux64_graphene', 'macosx64_graphene',
             'win64_graphene', 'all', 'none')
MOCHITESTS = ('mochitest-1', 'mochitest-2', 'mochitest-3', 'mochitest-4',
              'mochitest-5', 'mochitest-gl', 'mochitest-bc', 'mochitest-dt',
              'mochitest-o', 'mochitest-jetpack', 'mochitest-e10s-1',
              'mochitest-e10s-2', 'mochitest-e10s-3', 'mochitest-e10s-4',
              'mochitest-e10s-5', 'mochitest-e10s-browser-chrome-1',
              'mochitest-e10s-browser-chrome-2',
              'mochitest-e10s-browser-chrome-3',
              'mochitest-e10s-devtools-chrome')
WEB_PLATFORM_TESTS = ('web-platform-tests-1', 'web-platform-tests-2',
                      'web-platform-tests-3', 'web-platform-tests-4',
                      'web-platform-tests-reftests')
AUTOPHONE_UNITTESTS = ('autophone-smoketest', 'autophone-s1s2',
                       'autophone-webapp',
                       'autophone-mochitest-dom-browser-element',
                       'autophone-mochitest-dom-media',
                       'autophone-mochitest-skia',
                       'autophone-mochitest-toolkit-widgets')
ANDROID_UNITTESTS = ('plain-reftest-1', 'plain-reftest-2', 'plain-reftest-3',
                     'plain-reftest-4', 'plain-reftest-5', 'plain-reftest-6',
                     'plain-reftest-7', 'plain-reftest-8', 'plain-reftest-9',
                     'plain-reftest-10', 'plain-reftest-11', 'plain-reftest-12',
                     'plain-reftest-13', 'plain-reftest-14', 'plain-reftest-15',
                     'plain-reftest-16', 'jsreftest-1', 'jsreftest-2',
                     'jsreftest-3', 'jsreftest-4', 'jsreftest-5', 'jsreftest-6',
                     'mochitest-6', 'mochitest-7', 'mochitest-8', 'mochitest-9',
                     'mochitest-10', 'mochitest-11', 'mochitest-12', 'mochitest-13',
                     'mochitest-14', 'mochitest-15', 'mochitest-16',
                     'mochitest-gl', 'robocop-1', 'robocop-2', 'robocop-3',
                     'robocop-4', 'robocop-5', 'robocop-6', 'robocop-7',
                     'robocop-8', 'robocop-9', 'robocop-10', 'crashtest-1',
                     'crashtest-2', 'xpcshell-1', 'xpcshell-2', 'xpcshell-3',
                     'autophone-tests'
                    ) + AUTOPHONE_UNITTESTS
B2G_UNITTESTS = ('crashtest-3', 'reftest-1', 'reftest-2', 'reftest-3',
                 'reftest-4', 'reftest-5', 'reftest-6', 'reftest-7',
                 'reftest-8', 'reftest-9', 'reftest-10', 'reftest-11',
                 'reftest-12', 'reftest-13', 'reftest-14', 'reftest-15',
                 'reftest-16', 'reftest-17', 'reftest-18', 'reftest-19',
                 'reftest-20', 'marionette-webapi', 'gaia-build',
                 'gaia-build-unit', 'gaia-linter', 'gaia-unit', 'gaia-ui-test',
                 'gaia-integration')
UNITTESTS = ('reftest', 'reftest-e10s', 'reftest-no-accel', 'crashtest',
             'crashtest-e10s', 'xpcshell', 'jsreftest', 'marionette',
             'marionette-e10s', 'mozmill', 'cppunit', 'jittests', 'jittest-1',
             'jittest-2', 'mochitests', 'web-platform-tests', 'all', 'none'
            ) + MOCHITESTS + WEB_PLATFORM_TESTS + ANDROID_UNITTESTS + B2G_UNITTESTS
ANDROID_TALOS = ('remote-trobocheck2', 'remote-trobopan',
                 'remote-troboprovider', 'remote-tsvg', 'remote-tp4m_nochrome',
                 'remote-ts')
TALOS = ('chromez', 'dromaeojs', 'other_nol64', 'other_l64', 'g1', 'svgr',
         'tp5o', 'xperf', 'all', 'none') + ANDROID_TALOS
RESTRICTIONS = ('Mulet Linux', 'Ubuntu', '10.6', '10.8', '10.10', 'Windows XP',
                'Windows 7', 'Windows 8', 'Android', 'b2g', 'x64')

BUILD_RE = re.compile('[do]+')

class GitPusherException(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg

class GitPusher(object):
    def __init__(self, args):
        self._parse_args(args)
        self.cleaned = False
        self.made_try_commit = False

    def _create_b_args(self, rawargs):
        debug = False
        opt = False

        for a in rawargs:
            if not BUILD_RE.match(a):
                raise GitPusherException('invalid build selection %s' % (a,))

            if 'd' in a:
                debug = True
            if 'o' in a:
                opt = True

        return '%s%s' % ('d' if debug else '', 'o' if opt else '')

    def _create_args(self, atype, rawargs):
        args = []
        for a in rawargs:
            args.extend(a.split(','))

        if atype == 'talos':
            choices = TALOS
        elif atype == 'platform':
            choices = PLATFORMS
        else:
            raise GitPusherException('internal error')

        for a in args:
            if a not in choices:
                raise GitPusherException('invalid %s: %s' % (atype, a))

        if 'all' in args:
            if len(args) != 1:
                raise GitPusherException(
                    'all can not be used with any other %s' % (atype,))
            return 'all'

        if 'none' in args:
            if len(args) != 1:
                raise GitPusherException(
                    'none can not be used with any other %s' % (atype,))
            return 'none'

        # Make a set here to ensure there are no duplicates
        return ','.join(set(args))

    def _split_with_restrictions(self, args):
        rval = []
        done = False
        start = 0
        comma = -1
        openbracket = -1
        closebracket = -1
        while not done:
            comma = args.find(',', start)
            openbracket = args.find('[', start)
            if comma == -1:
                # We've reached the end, but there may be a restriction on this
                # last element.
                done = True
                if openbracket != -1:
                    # Yep, the last element has restrictions tacked on.
                    # Do some sanity checks to make sure it's properly-formed
                    closebracket = args.find(']', openbracket)
                    if closebracket == -1:
                        raise GitPusherException('Missing ] on %s' %
                                                 (args[start:],))
                    if args[-1] != ']':
                        raise GitPusherException(
                            'Extra characters after ] on %s' % (args[start:],))
                    test = args[start:openbracket]
                    restrs = args[openbracket + 1:-1]
                    rval.append((test, restrs))
                else:
                    # This last one was a simple test with no restrictions
                    rval.append((args[start:], ''))
            elif openbracket != -1 and openbracket < comma:
                # We've found a test that has restrictions on it. This could be
                # the last one, with multiple restrictions, or it may be
                # somewhere in the middle of things
                closebracket = args.find(']', openbracket)
                if closebracket == -1:
                    raise GitPusherException('Missing ] on %s' %
                                             (args[start:],))
                if closebracket != len(args) - 1 and args[closebracket + 1] != ',':
                    raise GitPusherException('Expected , after ] on %s' %
                                             (args[start:closebracket + 1],))
                test = args[start:openbracket]
                restrs = args[openbracket + 1:closebracket]
                rval.append((test, restrs))
                start = closebracket + 2 # 1 for comma, 1 for next non-comma
                if closebracket == len(args) - 1:
                    done = True
            else:
                # The simple case where we've found a test name with no
                # restrictions on it, and something comes next
                test = args[start:comma]
                start = comma + 1
                rval.append((test, ''))

        return rval

    def _create_u_args(self, args):
        unittests = set()
        restrictions = {}
        for a in args:
            if '[' in a:
                splitargs = self._split_with_restrictions(a)
                for test, restrs in splitargs:
                    if not test:
                        # Handle the case where we somehow ended up with
                        # something empty by ignoring it
                        continue
                    if test not in UNITTESTS:
                        raise GitPusherException('invalid unit test: %s' % (test,))
                    unittests.add(test)
                    if restrs:
                        rset = set(restrs.split(','))
                        if test in restrictions:
                            restrictions[test].update(rset)
                        else:
                            restrictions[test] = rset
            else:
                splitargs = a.split(',')
                for sa in splitargs:
                    if sa not in UNITTESTS:
                        raise GitPusherException('invalid unit test: %s' %
                                                 (sa,))
                    unittests.add(sa)

        for u, rset in restrictions.iteritems():
            for r in rset:
                if r.startswith('-'):
                    # Handle the case when we're removing something from a set
                    r = r[1:]
                if r not in RESTRICTIONS:
                    raise GitPusherException('invalid restriction: %s' % (r,))

        res = []
        for u in unittests:
            ustr = u
            if u in restrictions:
                restrs = ','.join(restrictions[u])
                rstr = '[%s]' % (restrs,)
                ustr += rstr
            res.append(ustr)
        return ','.join(res)

    def _parse_args(self, args):
        p = argparse.ArgumentParser(prog='git land')
        p.add_argument('-b', '--build', action='append')
        p.add_argument('-p', '--platform',
                help='Platforms to build', action='append')
        p.add_argument('-u', '--unittests',
                help='Unit tests to run', action='append')
        p.add_argument('-t', '--talos',
                help='Talos tests to run', action='append')
        p.add_argument('-P', '--profile',
                help='Run profiling', action='store_true')
        p.add_argument('-e', '--all-emails', help='Send all email',
                action='store_true')
        p.add_argument('-n', '--no-emails', help='Send no email',
                action='store_true')
        p.add_argument('-f', '--failure-emails', help='Send email on failures',
                       action='store_true')
        p.add_argument('-m', '--mozilla-central', action='store_true',
                help='Use mozilla-central configuration')

        args = p.parse_args(args)

        self.args = {'build':None, 'platform':None, 'unittests':None,
                     'talos':None, 'email':None}

        if args.build:
            # Use a set to ensure there are no duplicates
            self.args['build'] = self._create_b_args(args.build)

        if args.platform:
            self.args['platform'] = self._create_args('platform', args.platform)

        if args.unittests:
            self.args['unittests'] = self._create_u_args(args.unittests)

        if args.talos:
            self.args['talos'] = self._create_args('talos', args.talos)

        self.args['profile'] = args.profile

        if sum(map(int, [args.all_emails, args.no_emails, args.failure_emails])) > 1:
            raise GitPusherException('-e, -n, and -f are exclusive')

        if args.all_emails:
            self.args['email'] = '-e'

        if args.no_emails:
            self.args['email'] = '-n'

        if args.failure_emails:
            self.args['email'] = '-f'

        if args.mozilla_central:
            if args.build or args.platform or args.unittests or args.talos:
                raise GitPusherException('-m may not be used with -b, -p, -u or -t')
            self.args['build'] = 'do'
            self.args['platform'] = 'all'
            self.args['unittests'] = 'all'
            self.args['talos'] = 'all'

        if not self.args['build'] or not self.args['platform']:
            raise GitPusherException('missing -b and -p')

    def _build_try_args(self):
        args = ['-b', self.args['build'], '-p', self.args['platform']]

        if self.args['unittests']:
            args.extend(['-u', self.args['unittests']])

        if self.args['talos']:
            args.extend(['-t', self.args['talos']])

        if self.args['email']:
            args.append(self.args['email'])

        if self.args['profile']:
            args.append('mozharness: --spsProfile')

        return ' '.join(args)

    def cleanup(self):
        if self.cleaned:
            return

        self.cleaned = True
        if self.made_try_commit:
            p = subprocess.Popen(['git', 'reset', '--hard', 'HEAD~1'])
            if p.wait():
                raise GitPusherException('failed to reset to reasonable HEAD')

    def _push_to_try(self):
        args = self._build_try_args()
        p = subprocess.Popen(['git', 'commit', '--allow-empty', '-m',
                              'try: %s' % (args,),],
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if p.wait():
            raise GitPusherException('failed setting try selections')
        self.made_try_commit = True

        p = subprocess.Popen(['git', 'push', 'try'])
        if p.wait():
            raise GitPusherException('failed to push to try')

    def run(self):
        # Ensure there aren't any outstanding changes
        p = subprocess.Popen(['git', 'status', '--porcelain', '-z'],
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        p.wait()
        if p.stdout.read():
            raise GitPusherException('You have uncommitted changes')

        try:
            self._push_to_try()
        finally:
            self.cleanup()

if __name__ == '__main__':
    try:
        t = GitPusher(sys.argv[1:])
        t.run()
    except GitPusherException as e:
        sys.stderr.write('%s\n' % (e,))
        sys.exit(1)
